---
source: tests/parser.rs
expression: out
---
ParserReturn { program: Program { span: Span { start: 0, end: 31 }, source: "q.foo ? 1 : v.bar == 13 ? 2 : 3", is_complex: false, body: [Expression(Ternary(TernaryExpression { span: Span { start: 0, end: 31 }, test: Call(CallExpression { span: Span { start: 0, end: 5 }, kind: Query, callee: IdentifierReference { span: Span { start: 2, end: 5 }, name: "foo" }, arguments: None }), consequent: NumericLiteral(NumericLiteral { span: Span { start: 8, end: 9 }, value: 1.0, raw: "1" }), alternate: Ternary(TernaryExpression { span: Span { start: 12, end: 31 }, test: Binary(BinaryExpression { span: Span { start: 12, end: 23 }, left: Variable(VariableExpression { span: Span { start: 12, end: 17 }, lifetime: Variable, member: Property { span: Span { start: 12, end: 17 }, property: IdentifierReference { span: Span { start: 14, end: 17 }, name: "bar" } } }), operator: Equality, right: NumericLiteral(NumericLiteral { span: Span { start: 21, end: 23 }, value: 13.0, raw: "13" }) }), consequent: NumericLiteral(NumericLiteral { span: Span { start: 26, end: 27 }, value: 2.0, raw: "2" }), alternate: NumericLiteral(NumericLiteral { span: Span { start: 30, end: 31 }, value: 3.0, raw: "3" }) }) }))] }, errors: [], panicked: false }
