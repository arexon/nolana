---
source: tests/integration.rs
input_file: tests/parser/ternary.nolana
---
ParseResult {
    program: Program {
        span: Span {
            start: 0,
            end: 65,
        },
        source: "q.foo ? v.bar == 13 ? 1 : 2 : 3;\nq.foo ? 1 : v.bar == 13 ? 2 : 3;\n",
        body: Complex(
            [
                Expression(
                    Ternary(
                        TernaryExpression {
                            span: Span {
                                start: 0,
                                end: 31,
                            },
                            test: Call(
                                CallExpression {
                                    span: Span {
                                        start: 0,
                                        end: 5,
                                    },
                                    kind: Query,
                                    callee: Identifier {
                                        span: Span {
                                            start: 2,
                                            end: 5,
                                        },
                                        name: "foo",
                                    },
                                    arguments: None,
                                },
                            ),
                            consequent: Ternary(
                                TernaryExpression {
                                    span: Span {
                                        start: 8,
                                        end: 27,
                                    },
                                    test: Binary(
                                        BinaryExpression {
                                            span: Span {
                                                start: 8,
                                                end: 19,
                                            },
                                            left: Variable(
                                                VariableExpression {
                                                    span: Span {
                                                        start: 8,
                                                        end: 13,
                                                    },
                                                    lifetime: Variable,
                                                    member: Property {
                                                        property: Identifier {
                                                            span: Span {
                                                                start: 10,
                                                                end: 13,
                                                            },
                                                            name: "bar",
                                                        },
                                                    },
                                                },
                                            ),
                                            operator: Equality,
                                            right: NumericLiteral(
                                                NumericLiteral {
                                                    span: Span {
                                                        start: 17,
                                                        end: 19,
                                                    },
                                                    value: 13.0,
                                                    raw: "13",
                                                },
                                            ),
                                        },
                                    ),
                                    consequent: NumericLiteral(
                                        NumericLiteral {
                                            span: Span {
                                                start: 22,
                                                end: 23,
                                            },
                                            value: 1.0,
                                            raw: "1",
                                        },
                                    ),
                                    alternate: NumericLiteral(
                                        NumericLiteral {
                                            span: Span {
                                                start: 26,
                                                end: 27,
                                            },
                                            value: 2.0,
                                            raw: "2",
                                        },
                                    ),
                                },
                            ),
                            alternate: NumericLiteral(
                                NumericLiteral {
                                    span: Span {
                                        start: 30,
                                        end: 31,
                                    },
                                    value: 3.0,
                                    raw: "3",
                                },
                            ),
                        },
                    ),
                ),
                Expression(
                    Ternary(
                        TernaryExpression {
                            span: Span {
                                start: 33,
                                end: 64,
                            },
                            test: Call(
                                CallExpression {
                                    span: Span {
                                        start: 33,
                                        end: 38,
                                    },
                                    kind: Query,
                                    callee: Identifier {
                                        span: Span {
                                            start: 35,
                                            end: 38,
                                        },
                                        name: "foo",
                                    },
                                    arguments: None,
                                },
                            ),
                            consequent: NumericLiteral(
                                NumericLiteral {
                                    span: Span {
                                        start: 41,
                                        end: 42,
                                    },
                                    value: 1.0,
                                    raw: "1",
                                },
                            ),
                            alternate: Ternary(
                                TernaryExpression {
                                    span: Span {
                                        start: 45,
                                        end: 64,
                                    },
                                    test: Binary(
                                        BinaryExpression {
                                            span: Span {
                                                start: 45,
                                                end: 56,
                                            },
                                            left: Variable(
                                                VariableExpression {
                                                    span: Span {
                                                        start: 45,
                                                        end: 50,
                                                    },
                                                    lifetime: Variable,
                                                    member: Property {
                                                        property: Identifier {
                                                            span: Span {
                                                                start: 47,
                                                                end: 50,
                                                            },
                                                            name: "bar",
                                                        },
                                                    },
                                                },
                                            ),
                                            operator: Equality,
                                            right: NumericLiteral(
                                                NumericLiteral {
                                                    span: Span {
                                                        start: 54,
                                                        end: 56,
                                                    },
                                                    value: 13.0,
                                                    raw: "13",
                                                },
                                            ),
                                        },
                                    ),
                                    consequent: NumericLiteral(
                                        NumericLiteral {
                                            span: Span {
                                                start: 59,
                                                end: 60,
                                            },
                                            value: 2.0,
                                            raw: "2",
                                        },
                                    ),
                                    alternate: NumericLiteral(
                                        NumericLiteral {
                                            span: Span {
                                                start: 63,
                                                end: 64,
                                            },
                                            value: 3.0,
                                            raw: "3",
                                        },
                                    ),
                                },
                            ),
                        },
                    ),
                ),
            ],
        ),
    },
    errors: [],
    panicked: false,
}
