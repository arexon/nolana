---
source: tests/integration.rs
input_file: tests/transformer/assignment.nolana
---
variable.x = variable.y;
variable.x = variable.x ?? 0 + variable.y;
variable.x = variable.x ?? 0 - variable.y;
variable.x = variable.x ?? 0 * variable.y;
variable.x = variable.x ?? 0 / variable.y;
variable.x = math.pow(variable.x ?? 0, variable.y);
variable.x = math.mod(variable.x ?? 0, variable.y);
variable.x ? {
    variable.x = variable.y;
};
!variable.x ? {
    variable.x = variable.y;
};
variable.x = math.floor(variable.x ?? 0 / math.pow(2, variable.y));
variable.x = variable.x ?? 0 * math.pow(2, variable.y);
{
    variable.__11_result = 0;
    variable.__11_bit = 0;
    loop(24, {
        variable.__11_left_bit = math.mod(math.floor(variable.x ?? 0 / math.pow(2, variable.__11_bit)), 2);
        variable.__11_right_bit = math.mod(math.floor(variable.y / math.pow(2, variable.__11_bit)), 2);
        variable.__11_or_bit = math.min(1, variable.__11_left_bit + variable.__11_right_bit);
        variable.__11_result = variable.__11_result + variable.__11_or_bit * math.pow(2, variable.__11_bit);
        variable.__11_bit = variable.__11_bit + 1;
    });
};
variable.x = variable.__11_result;
{
    variable.__13_result = 0;
    variable.__13_bit = 0;
    loop(24, {
        variable.__13_left_bit = math.mod(math.floor(variable.x ?? 0 / math.pow(2, variable.__13_bit)), 2);
        variable.__13_right_bit = math.mod(math.floor(variable.y / math.pow(2, variable.__13_bit)), 2);
        variable.__13_and_bit = variable.__13_left_bit * variable.__13_right_bit;
        variable.__13_result = variable.__13_result + variable.__13_and_bit * math.pow(2, variable.__13_bit);
        variable.__13_bit = variable.__13_bit + 1;
    });
};
variable.x = variable.__13_result;
{
    variable.__15_result = 0;
    variable.__15_bit = 0;
    loop(24, {
        variable.__15_left_bit = math.mod(math.floor(variable.x ?? 0 / math.pow(2, variable.__15_bit)), 2);
        variable.__15_right_bit = math.mod(math.floor(variable.y / math.pow(2, variable.__15_bit)), 2);
        variable.__15_xor_bit = math.mod(variable.__15_left_bit + variable.__15_right_bit, 2);
        variable.__15_result = variable.__15_result + variable.__15_xor_bit * math.pow(2, variable.__15_bit);
        variable.__15_bit = variable.__15_bit + 1;
    });
};
variable.x = variable.__15_result;
