---
source: tests/integration.rs
input_file: tests/parser/unary.nolana
---
ParseResult {
    program: Program {
        span: Span {
            start: 0,
            end: 20,
        },
        source: "-(1 + 1);\n!(1 && 0);\n",
        body: Complex(
            [
                Expression(
                    Unary(
                        UnaryExpression {
                            span: Span {
                                start: 0,
                                end: 8,
                            },
                            operator: Negate,
                            argument: Parenthesized(
                                ParenthesizedExpression {
                                    span: Span {
                                        start: 1,
                                        end: 8,
                                    },
                                    body: Single(
                                        Binary(
                                            BinaryExpression {
                                                span: Span {
                                                    start: 2,
                                                    end: 7,
                                                },
                                                left: NumericLiteral(
                                                    NumericLiteral {
                                                        span: Span {
                                                            start: 2,
                                                            end: 3,
                                                        },
                                                        value: 1.0,
                                                        raw: "1",
                                                    },
                                                ),
                                                operator: Addition,
                                                right: NumericLiteral(
                                                    NumericLiteral {
                                                        span: Span {
                                                            start: 6,
                                                            end: 7,
                                                        },
                                                        value: 1.0,
                                                        raw: "1",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        },
                    ),
                ),
                Expression(
                    Unary(
                        UnaryExpression {
                            span: Span {
                                start: 10,
                                end: 19,
                            },
                            operator: Not,
                            argument: Parenthesized(
                                ParenthesizedExpression {
                                    span: Span {
                                        start: 11,
                                        end: 19,
                                    },
                                    body: Single(
                                        Binary(
                                            BinaryExpression {
                                                span: Span {
                                                    start: 12,
                                                    end: 18,
                                                },
                                                left: NumericLiteral(
                                                    NumericLiteral {
                                                        span: Span {
                                                            start: 12,
                                                            end: 13,
                                                        },
                                                        value: 1.0,
                                                        raw: "1",
                                                    },
                                                ),
                                                operator: And,
                                                right: NumericLiteral(
                                                    NumericLiteral {
                                                        span: Span {
                                                            start: 17,
                                                            end: 18,
                                                        },
                                                        value: 0.0,
                                                        raw: "0",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        },
                    ),
                ),
            ],
        ),
    },
    errors: [],
}
